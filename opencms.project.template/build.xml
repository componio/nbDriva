<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="opencms.project.template" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:git="antlib:com.rimerosolutions.ant.git">
   <description>Builds, tests, and runs the project renameMe</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    
    <property file="${basedir}/nbDriva.properties"/>
    <!-- the individual properties will be set before the default properties
         (cause properties can't be overriden per default in Ant)
     -->
    <property file="${nbDriva.individual.config}"/>
    <property file="${nbDriva.default.config}"/>
    
    <!-- here you can find an ugly JavaScript workaround with the possibility to
         override properties. But it's not recommended.
    -->
    <!--
    <loadfile property="individualProperties" srcfile="${nbDriva.individual.config}" />
    <script language="javascript">
		<![CDATA[
		var lines = project.getProperty('individualProperties').split('\n');
		for(var i=0;i<lines.length;++i) {
			var line = lines[i];
			var startWith = /^#|#\s*|\s*#/
			var regex = /(.+)=(.+)/;
			if(line.match(startWith) || !line.match(regex))
				continue;
			regex.exec(line);
			project.setProperty(RegExp.$1.trim(), RegExp.$2.trim());
		}
		]]>
    </script>
    -->
    
    <loadresource property="cmsSyncWithSlash">
        <propertyresource name="cmsSync"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="\" to="/"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    
    <target name="-post-compile">
        
        <!-- ####### CREATE PROJECT STRUCTURE ####### -->
        <mkdir dir="${basedir}/ext_package"/>
        <mkdir dir="${basedir}/initial_setup"/>
        <mkdir dir="${basedir}/content"/>
        <mkdir dir="${basedir}/config"/>
        <mkdir dir="${basedir}/package"/>
        <mkdir dir="${basedir}/test"/>
        <!-- ####### END OF CREATED PROJECT DIRECTORIES ####### -->
        
        <echo message="Copying new.test.module1 to cmsSyncSystem"/>
        <copy todir="${cmsSync}${acPackage}/classes">
            <fileset dir="build/web/WEB-INF/classes"/>
        </copy>
        <copy todir="${cmsSync}${acPackage}/elements">
            <fileset dir="./Web/elements">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/formatters">
            <fileset dir="./Web/formatters">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/lib">
            <fileset dir="./Web/WEB-INF/lib">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/resources">
            <fileset dir="./Web/resources">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/templates">
            <fileset dir="./Web/templates">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/schemas">
            <fileset dir="./Web/schemas">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/doc">
            <fileset dir="./Web/doc">
                <exclude name=".svn"/>
            </fileset>
        </copy>
        <copy todir="${cmsSync}${acPackage}/functions">
            <fileset dir="./Web/functions">
                <exclude name=".svn"/>
            </fileset>
        </copy>        
        <copy tofile="${cmsSync}${acPackage}/.config">
            <fileset dir="./WEB">
                <include name="config"/>
            </fileset>
        </copy> 
    </target>
   
    <target name="build-classpath-jar" depends="ivy-resolve-dependencies">
         <path id="build-classpath">
           <fileset dir="${ivy.resolved.libs.dir}">
              <include name="**/*.jar"/>
           </fileset>
        </path>
        <manifestclasspath property="lib.list" jarfile="${ivy.resolved.libs.dir}/${classpath-compile.jar}">
           <classpath refid="build-classpath" />
        </manifestclasspath>
        
        <jar jarfile="${ivy.resolved.libs.dir}/${classpath-compile.jar}">          
           <manifest>        
              <attribute name="Class-Path" value=". ${lib.list}"/>
           </manifest>         
        </jar>
    </target>
    
    <target name="-post-clean" >
        <echo message="Cleaning cmsSyncSystem: ${cmsSync}${acPackage}"/>
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${cmsSync}${acPackage}"/>
        </delete>
    </target>
    
    <!--########################################################################
    ############################ OpenCms Operations Section ####################
    ############################################################################ 
    -->
    
    <!-- ######################## CREATION OF OPENCMS MODULE ################-->
    <target name="shell_create_new_module">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_createNewModule">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
    
    <!-- ######################## CREATION OF OPENCMS RESOURCE TYPE ################-->
    <target name="shell_create_new_resource_type">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_createNewResourceType">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
    
    <!-- ######################## EXPORT OF OPENCMS MODULE ##################-->
    <target name="shell_export_module">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_exportModule">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
     
    <target name="move_module_to_packagedir">
         <move todir="${packagePath}" failonerror="true">
             <fileset dir="${moduleDir}">
                <include name="${modulename}*.zip"/>
            </fileset>
         </move>
    </target>
     
    <!-- ######################## IMPORT OF OPENCMS MODULE ##################-->
    <target name="shell_import_module">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_importModule">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
    <!-- ####################################################################-->
    
    <!-- ############### SYNCHRONIZATION OF OPENCMS MODULE ##################-->
     <target name="check_sync_over_cmis">
        <condition property="sync.cmis.property.is.true">
            <equals arg1="${syncOverCMIS}" arg2="true"/>
        </condition>
    </target>
    
    <target name="shell_sync_module" depends="check_sync_over_cmis,shell_sync_module_over_cmis,shell_sync_module_over_shell"/>
    
    <target name="shell_sync_module_over_cmis" if="sync.cmis.property.is.true">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_syncFolderOverCMIS">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
    
    <target name="shell_sync_module_over_shell" unless="sync.cmis.property.is.true">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_syncFolder">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
    
     <target name="shell_reverse_sync_single" unless="sync.cmis.property.is.true">
        <ant inheritAll="true" antfile="./buildModuleOperationsWithCmsShell.xml" target="run_reverseSyncSingle">
            <property name="cmsSync" value="${cmsSyncWithSlash}"/>
        </ant>
    </target>
    
    <!-- ################################################################### -->
    <target name="build_new_module" depends="clean,dist,shell_create_new_module,shell_sync_module"/>
    <target name="build_new_resource_type" depends="clean,dist,shell_create_new_resource_type"/>
    <target name="build_import_module" depends="clean,dist,shell_import_module,shell_sync_module"/>
    <target name="build_sync_folder_standalone" depends="clean,dist,shell_sync_module"/>
    <target name="build_cms_reverse_sync" depends="clean,dist,shell_export_module,move_module_to_packagedir"/>
    <target name="build_cms_reverse_single" depends="clean,dist,shell_reverse_sync_single"/>
  
     <!--########################################################################
         ################# End of OpenCms Operations Section ####################
         ######################################################################## 
    -->
    
    <!-- used only at changes in opencms-project-template, which is used in plugin,
         this target can be deleted in default projects
    -->  
    <target name="delete_zipfile">
        <delete file="./OpenCmsProjectStructureTemplateProject.zip"/>
    </target>
    
    <!-- used only at changes in opencms-project-template, which is used in plugin,
         this target can be deleted in default projects
    -->
    <target name="zipme" description="Zip the application to the sample project" depends="delete_zipfile">
        <zip basedir="." destfile="./OpenCmsProjectStructureTemplateProject.zip">
            <exclude name="**/build/"/>
            <exclude name="**/dist/"/>
            <exclude name="**/nbproject/private/"/>
        </zip>
    </target>
    
    <!--
    ############################################################################
    ################################ APACHE IVY SECTION ########################
    ############################################################################
    
    NOTE: This section is an alternative attempt to resolve library dependencies 
    half automatically for opencms on which this project rely.
    If someone don't want to download and install Apache Ivy the library dependencies
    have to be resolved manually. The required jars can be found in the source
    bundles of OpenCms 8.5.x at http://www.opencms.org/de/download/opencms.html
    or at the github repository 
    (see: http://www.opencms.org/de/development/revision-control.html)
    
    ############################################################################
    ############################################################################
    ############################################################################
    -->   
    <!-- downloading apache ivy dependency management tool -->
    <target name="ivy-download" unless="skip.download" depends="init">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    <!-- installig apache ivy -->
    <target name="ivy-install" depends="ivy-download" >
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    <!-- resolving dependencies using ivy -->
    <target name="ivy-resolve-dependencies" depends="ivy-install">
        <delete dir="${ivy.resolved.libs.dir}/default"/>
        <mkdir dir="${ivy.resolved.libs.dir}/default"/>
        <copy file="${ivy.jar.dir}/ivy_opencms_${opencms.version}.xml" tofile="${basedir}/ivy.xml" overwrite="true"/> 
        <ivy:settings file="${basedir}/ivysettings.xml"/>
        <ivy:cachepath pathid="ant.git.tasks.classpath"/>
        
        <ivy:retrieve pattern="${ivy.resolved.libs.dir}/[conf]/[artifact]-[type]-[revision].[ext]"/>
        <!--
        <taskdef uri="antlib:com.rimerosolutions.ant.git" resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml">
            <classpath>
                <path refid="ant.git.tasks.classpath"/>
            </classpath>
        </taskdef>
        <git:git directory="../../download/tmp" verbose="true">
            <git:clone uri="https://github.com/componio/nbDriva" />
        </git:git>
        <move todir="../../download" failonerror="true">
            <fileset dir="../../download/tmp">
                <include name="*"/>
            </fileset>
        </move>
        <git:git directory="../../download/tmp">
            <git:rm>
                <fileset dir="../../download/tmp" includes="*"/>
            </git:rm>
        </git:git>
        <delete dir="../../download/tmp" includeEmptyDirs="true" quiet="true" performGCOnFailedDelete="true" deleteonexit="true" removenotfollowedsymlinks="true"/>
        -->
    </target>
    <!-- ########################## END OF IVY SECTION ##################### -->
</project>
